generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
url      = env("DATABASE_URL") 
   }

model User {
  id            String   @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String?
  firstName     String?
  lastName      String?
  company       String?
  position      String?
  phone1        String?
  phone2        String?
  email2        String?
  street1       String?
  street2       String?
  zipCode       String?
  city          String?
  state         String?
  country       String?
  bio           String?
  image         String?  @db.LongText
  facebook      String?  @db.Text
  instagram     String?  @db.Text
  linkedin      String?
  twitter       String?
  tiktok        String?
  googleReview  String?  @db.Text
  revolut       String?
  website       String? @db.Text
  viber         String?
  whatsapp      String?
  github        String?
  behance       String?
  youtube       String?
  paypal        String?
  trustpilot    String?
  qrCode        String?  @db.Text
  selectedColor String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  calendly      String?
  discord       String?
  telegram      String?
  tripadvisor   String?
  pdf           String?  @db.LongText
  coverImage    String?  @db.LongText
  isDirect      Boolean  @default(false)
  dashboard     Dashboard?
  videoUrl String?  @db.LongText 
  language  String   @default("bg") 
  leads Subscribed[]  // one-to-many relation: user -> leads
  subscriptionId   String?        @unique
  subscription     Subscription?  @relation("UserSubscription")
  invoices         Invoice[]
}

model Dashboard {
  id               String           @id @default(uuid())
  userId           String           @unique
  profileVisits    Int              @default(0)
  vcfDownloads     Int              @default(0)
  profileShares    Int              @default(0)
  socialLinkClicks Int              @default(0)
  user             User             @relation(fields: [userId], references: [id])
  events           DashboardEvent[]
}

model DashboardEvent {
  id        String   @id @default(uuid())
  userId    String
  type      String   // "visit" | "share" | "download" | "socialClick"
  timestamp DateTime @default(now())
  dashboard Dashboard @relation(fields: [userId], references: [userId])

  @@index([userId, timestamp])
}

model Product {
  id         Int      @id @default(autoincrement())
  title      String
  price      Float
  oldPrice   Float?
  image      String   @db.LongText
  frontImage String?  @db.LongText
  backImage  String?  @db.LongText
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  qrColor    String?
}

model CardDesign {
  id              Int      @id @default(autoincrement())
  cardName        String
  cardTitle       String
  userName        String
  userPhone       String
  userEmail       String
  frontDataUrl    String   @db.LongText
  backDataUrl     String   @db.LongText
  createdAt       DateTime @default(now())
  courierAddress  String?
  courierIsSpeedy Int
  backLogoUrl     String?  @db.LongText
}

model Company {
  id        String   @id @default(uuid())
  name      String
  googleReviewLink  String   @db.LongText
  createdAt DateTime @default(now())
}

model Subscribed {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  name        String
  email       String?
  phone       String?
  message     String?   @db.Text

  createdAt   DateTime  @default(now())
  isAccepted  Boolean   @default(true)

  ipAddress   String?
  userAgent   String?
}

model Subscription {
  id              String   @id @default(cuid())
  subscription_id String   @unique
  stripe_user_id  String
  plan_id         String
  status          String   // active | canceled | trialing
  start_date      DateTime
  end_date        DateTime?

  userId          String   @unique
  user            User     @relation("UserSubscription", fields: [userId], references: [id])
}


model Invoice {
  id                String   @id @default(cuid())
  stripeId          String   @unique
  userId            String
  amountPaid        Int
  currency          String
  hostedInvoiceUrl  String
  createdAt         DateTime @default(now())

  user              User     @relation(fields: [userId], references: [id])
}

model Contact {
  id       Int      @id @default(autoincrement())
  name     String
  email    String
  phone    String?
  subject  String?
  sendedOn DateTime @default(now())
}